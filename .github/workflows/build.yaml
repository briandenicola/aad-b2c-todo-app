name: Builds code for project
on:
  workflow_dispatch:
    
jobs:
  deploy:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ACR_NAME: bjdcsa.azurecr.io
      API_IMAGE_NAME: ${{ env.ACR_NAME }}/todo/api
      SPA_IMAGE_NAME: ${{ env.ACR_NAME }}/todo/spa
    
    steps:
    - name: "Checkout"
      uses: actions/checkout@master

    - name: "Log into Azure"
      uses: Azure/login@v1.1
      with:
        creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

    - name: "Build API code"
      shell: bash
      working-directory: './source/api'
      run: |
        docker build -t ${{ env.API_IMAGE_NAME }}:${{ github.sha }} .

    - uses: Azure/container-scan@v0 
      name: Scan image for vulnerabilities
      id: container-scan
      continue-on-error: true
      with:
        image-name: ${{ env.API_IMAGE_NAME }}:${{ github.sha }}

    - name: "Push API code"
      shell: bash
      working-directory: './source/api'
      run: |
        az acr login -u ${{ env.ACR_NAME }}
        docker push ${{ env.API_IMAGE_NAME }}:${{ github.sha }}

    #- name: Post logs to appinsights
    #  uses: Azure/publish-security-assessments@v0
    #  with: 
    #    scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
    #    connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
    #    subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }} 

    - name: "Build SPA code"
      shell: bash
      working-directory: './source/spa'
      run: |
        export DOCKER_IMAGE=${{ env.SPA_IMAGE_NAME }}:${{ github.sha }}
      
        az acr login -u  ${{ env.ACR_NAME }}
        docker build -t ${DOCKER_IMAGE} .
        docker push ${DOCKER_IMAGE}

    - name: "Publish Helm Chart"
      shell: bash
      working-directory: './chart'
      run: |
        helm package . 
        package=`ls b2c-todo*.tgz`
        helm push ${package} oci://${{ env.ACR_NAME }}/helm
